# This JCasC file is tailored for the Docker Compose configuration (`../compose.yaml`) that is bundled within this repository
jenkins:
  systemMessage: "${systemMessage}"
  noUsageStatistics: true
  slaveAgentPort: -1 # Docker Plugin attaches directly to dynamic agent containers, thus agent port is not needed.
  securityRealm:
    local:
      allowsSignup: false
      enableCaptcha: false
      users:
        - id: "${JENKINS_ADMIN_USER}" # See compose.yaml
          password: "${JENKINS_ADMIN_PASSWORD}" # See compose.yaml
          properties:
            - theme:
                theme: "darkSystem" # Requires plugin `dark-theme` - see `Dockerfile.jenkins`

  authorizationStrategy: # IMPORTANT: This configuration assumes a single user instance. If this instance will have more than one user or the users are not fully trusted, this authorization strategy MUST BE REPLACED with something more secure.
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false
  disableRememberMe: true # Disable "Keep me signed in‚Äù

  crumbIssuer: "standard"
  mode: NORMAL
  numExecutors: 0 # No executors on built-in node

  clouds:
    - docker:
        name: "docker"
        containerCap: 100 # Default is 100, adjust as needed
        dockerApi:
          dockerHost:
            uri: "${DOCKER_HOST}" # docker-socket-proxy container name defined in compose.yaml
          connectTimeout: 30
        templates:
          - connector:
              attach:
                user: "jenkins" # Custom user defined in `Dockerfile.agent`
            dockerTemplateBase:
              image: jenkins-agent:local # Custom container image defined in Dockerfile.agent and built to host's Docker cache via compose.yaml
              network: "DockerProxy" # DockerProxy network for docker-socket proxy container -- See compose.yaml
              environment:
                - "DOCKER_HOST=${DOCKER_HOST}" # See compose.yaml
                - "BITWARDEN_SERVER_URL=${BITWARDEN_SERVER_URL}" # See compose.yaml
              # Enables relative bind mounts in Docker Compose files by bind mounting agent workspace to host filesystem and mirroring Jenkins workspace paths on the host and the agent containers.
              # Agent containers use Docker CLI to control host Docker daemon (Docker-out-of-Docker pattern).
              # Without path mirroring, Compose configurations with relative bind mounts (e.g. './relativeFile') fail to deploy because agent and host Docker Daemon see different absolute paths.
              # This configuration ensures both agent and host resolve './relativeFile' to the same location.
              # Requires ${DOCKER_VOLUMES}/Jenkins/workspace directory structure on host filesystem -- See compose.yaml.
              # Mounts to .../workspace/workspace to ensure agent root workspace is `${DOCKER_VOLUMES}/Jenkins/workspace` and job/repository workspace is `{DOCKER_VOLUMES}/Jenkins/workspace/workspace` (workspace can have 2 different meanings in Jenkins)
              mounts:
                - "type=bind,source=${DOCKER_VOLUMES}/Jenkins/workspace/workspace,destination=${DOCKER_VOLUMES}/Jenkins/workspace/workspace"
            labelString: "docker"
            mode: EXCLUSIVE
            name: "docker"
            remoteFs: "${DOCKER_VOLUMES}/Jenkins/workspace" # Set the workspace to the bind mounted directory -- see `mounts` directive above.

credentials:
  system:
    domainCredentials:
      - credentials:
          - usernamePassword:
              scope: GLOBAL
              id: "git-creds"
              username: "${GIT_USERNAME}" # See compose.yaml
              password: "${GIT_TOKEN}" # See compose.yaml
              description: "Gitea credentials for organization folder"
          - usernamePassword:
              scope: GLOBAL
              id: "bitwarden-api-key"
              username: "${BITWARDEN_CLIENTID}" # See compose.yaml
              password: "${BITWARDEN_CLIENTSECRET}" # See compose.yaml
              description: "Bitwarden CLI API Credentials"
          - string:
              scope: GLOBAL
              id: "bitwarden-master-password"
              secret: "${BITWARDEN_MASTER_PASSWORD}" # See compose.yaml
              description: "Bitwarden CLI Master Password"

unclassified:
  location:
    url: "${JENKINS_URL}"
    adminAddress: "${ADMIN_ADDRESS}" # See compose.yaml

  giteaServers:
    servers:
      - credentialsId: git-creds
        displayName: scm
        manageHooks: true
        serverUrl: ${GIT_SERVER_URL} # See compose.yaml

  globalLibraries:
    libraries:
      - defaultVersion: "main"
        name: "JenkinsBitwardenUtils"
        retriever:
          modernSCM:
            scm:
              git:
                credentialsId: "git-creds"
                remote: ${GIT_SERVER_URL}/mwdle/JenkinsBitwardenUtils.git # Also on Github! https://github.com/mwdle/JenkinsBitwardenUtils
                traits:
                  - "gitBranchDiscovery"

  mailer:
    replyToAddress: ${REPLY_TO_EMAIL} # See compose.yaml
    smtpHost: ${SMTP_HOST} # See compose.yaml
    smtpPort: ${SMTP_PORT} # See compose.yaml
    useSsl: true
    authentication:
      username: ${SMTP_USERNAME} # See compose.yaml
      password: ${SMTP_PASSWORD} # See compose.yaml

  buildDiscarders:
    configuredBuildDiscarders:
      - "jobBuildDiscarder"
      - simpleBuildDiscarder:
          discarder:
            logRotator:
              numToKeepStr: "1000000"
              daysToKeepStr: "730"

jobs:
  - file: /var/jenkins_home/JCasC/orgfolder.groovy
