jenkins:
  systemMessage: "${systemMessage}"
  noUsageStatistics: true
  slaveAgentPort: -1 # Docker Plugin attaches directly to dynamic agent containers, thus agent port is not needed.
  securityRealm:
    local:
      allowsSignup: false
      enableCaptcha: false
      users:
        - id: "${JENKINS_ADMIN_USER}" # See compose.yaml
          password: "${JENKINS_ADMIN_PASSWORD}" # See compose.yaml
          properties:
            - theme:
                theme: "darkSystem" # Requires plugin `dark-theme` - see `Dockerfile.jenkins`

  authorizationStrategy: # IMPORTANT: This configuration assumes a single user instance. If this instance will have more than one user or the users are not fully trusted, this authorization strategy MUST BE REPLACED with something more secure.
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false
  disableRememberMe: true # Disable "Keep me signed in‚Äù

  crumbIssuer: "standard"
  mode: NORMAL
  numExecutors: 0 # No executors on built-in node

  clouds:
    - docker:
        name: "docker"
        containerCap: 100 # Default is 100, adjust as needed
        dockerApi:
          dockerHost:
            uri: "${DOCKER_HOST}" # docker-socket-proxy container name defined in compose.yaml
          connectTimeout: 30
        templates:
          - connector:
              attach:
                user: "jenkins" # Custom user defined in `Dockerfile.agent`
            dockerTemplateBase:
              image: jenkins-agent:local # Custom container image defined in Dockerfile.agent and built to host's Docker cache via compose.yaml
              network: "DockerProxy" # DockerProxy network for docker-socket proxy container -- See compose.yaml
              environment:
                - "DOCKER_HOST=${DOCKER_HOST}" # See compose.yaml
                - "BITWARDEN_SERVER_URL=${BITWARDEN_SERVER_URL}" # See compose.yaml
              # Persisting the workspace on the host machine allows you to create Docker bind mounts from the repository itself into any containers you may create.
              # For example this could mean mounting a configuration file directly from your SCM repository into a container you are creating using a compose.yaml file from that same repository.
              # The reason this is necessary in this Jenkins configuration is because bind mounts in any compose.yaml file from your repositories are from the host machine's filesystem to the container(s) you may create, not from the ephemeral agent container into the container(s) you may create.
              mounts:
                - "type=bind,source=${DOCKER_VOLUMES}/Jenkins/workspace,destination=/home/jenkins/workspace"
            labelString: "docker"
            mode: EXCLUSIVE
            name: "docker"
            remoteFs: "/home/jenkins"

credentials:
  system:
    domainCredentials:
      - credentials:
          - usernamePassword:
              scope: GLOBAL
              id: "git-creds"
              username: "${GIT_USERNAME}" # See compose.yaml
              password: "${GIT_TOKEN}" # See compose.yaml
              description: "Gitea credentials for organization folder"
          - usernamePassword:
              scope: GLOBAL
              id: "bitwarden-api-key"
              username: "${BITWARDEN_CLIENTID}" # See compose.yaml
              password: "${BITWARDEN_CLIENTSECRET}" # See compose.yaml
              description: "Bitwarden CLI API Credentials"
          - string:
              scope: GLOBAL
              id: "bitwarden-master-password"
              secret: "${BITWARDEN_MASTER_PASSWORD}" # See compose.yaml
              description: "Bitwarden CLI Master Password"

unclassified:
  location:
    url: "${JENKINS_URL}"
    adminAddress: "${ADMIN_ADDRESS}" # See compose.yaml

  giteaServers:
    servers:
      - credentialsId: git-creds
        displayName: scm
        manageHooks: true
        serverUrl: ${GIT_SERVER_URL} # See compose.yaml

  mailer:
    replyToAddress: ${REPLY_TO_EMAIL} # See compose.yaml
    smtpHost: ${SMTP_HOST} # See compose.yaml
    smtpPort: ${SMTP_PORT} # See compose.yaml
    useSsl: true
    authentication:
      username: ${SMTP_USERNAME} # See compose.yaml
      password: ${SMTP_PASSWORD} # See compose.yaml

  buildDiscarders:
    configuredBuildDiscarders:
      - "jobBuildDiscarder"
      - simpleBuildDiscarder:
          discarder:
            logRotator:
              numToKeepStr: "1000000"
              daysToKeepStr: "730"

jobs:
  - file: /var/jenkins_home/JCasC/orgfolder.groovy
